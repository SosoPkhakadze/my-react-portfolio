File Path: C:\Users\admin\Desktop\portfolio\my-react-portfolio\src\components\Projects\ProjectModal.css
File Name: ProjectModal.css
Code:
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10; /* Ensure it's above other content */
  }
  
  .modal-content {
    background-color: var(--bg-color-light);
    color: var(--text-color-light);
    padding: 2rem;
    border-radius: 12px; /* More rounded corners */
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2); /* Softer shadow */
    max-width: 70%; /* Adjust as needed */
    max-height: 80%;
    overflow-y: auto;
    position: relative;
    text-align: center; /* Center align modal content */
  }
  
  .dark-theme .modal-content {
    background-color: var(--bg-color-dark);
    color: var(--text-color-dark);
  }
  
  .modal-title {
    font-size: 1.8rem;
    margin-bottom: 1rem;
    color: var(--accent-color-light);
  }
  
  .dark-theme .modal-title {
    color: var(--accent-color-dark);
  }
  
  .modal-image {
    width: 100%;
    margin: 0 auto 20px;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .modal-image img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  .modal-description {
    margin-bottom: 2rem; /* Space before the buttons */
    font-size: 1rem;
  }
  
  .close-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color-light);
    z-index: 11;
  }
  
  .dark-theme .close-button {
    color: var(--text-color-dark);
  }
  
  .modal-buttons {
    /* Add this container for buttons */
    margin-top: 1rem;
  }
  
  .modal-button {
    background-color: var(--accent-color-light);
    color: var(--text-color-dark);
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    font-size: 1rem;
    cursor: pointer;
    margin: 0 0.5rem; /* Space between buttons */
    transition: background-color 0.3s ease;
  }
  
  .dark-theme .modal-button {
    background-color: var(--accent-color-dark);
    color: var(--text-color-light);
  }
  
  .modal-button:hover {
    background-color: var(--orbit-color-hover-light);
  }
  
  .dark-theme .modal-button:hover {
    background-color: var(--orbit-color-hover-dark);
  }

  /* Modal Image Carousel */
.modal-image-carousel {
  display: flex;
  overflow-x: auto; /* Enable horizontal scrolling */
  gap: 10px; /* Space between images */
  margin-bottom: 20px;
}

.modal-image-carousel .modal-image {
  max-width: 100%;
  height: auto;
  object-fit: contain;
}
--------------------
File Path: C:\Users\admin\Desktop\portfolio\my-react-portfolio\src\components\Projects\ProjectModal.jsx
File Name: ProjectModal.jsx
Code:
// src/components/Projects/ProjectModal.js
import React from "react";
import "./ProjectModal.css";
import project1Image from "../assets/project1-1.jpg";

const ProjectModal = ({ project, onClose }) => {
    return (
        <div className="modal-overlay" onClick={onClose}>
            <div
                className="modal-content"
                onClick={(e) => e.stopPropagation()}
            >
                <button className="close-button" onClick={onClose}>
                    X
                </button>
                <h2 className="modal-title">{project.title}</h2>
                {project.id === "k-line-data-analysis" && (
                    <div className="modal-image">
                        <img
                            src={project1Image}
                            alt={`${project.title}`}
                        />
                    </div>
                )}

                {/* Job Search Image Carousel */}
                {project.id === "job-search" && (
                    <div className="modal-image-carousel">
                        {project.images.map((image, index) => (
                            <img
                                key={index}
                                src={image}
                                alt={`${project.title} ${index + 1}`}
                                className="modal-image"
                            />
                        ))}
                    </div>
                )}
                <p className="modal-description">{project.description}</p>
                <div className="modal-buttons">
                    {project.githubLink && (
                        <a
                            href={project.githubLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="modal-button"
                        >
                            GitHub
                        </a>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ProjectModal;
--------------------
File Path: C:\Users\admin\Desktop\portfolio\my-react-portfolio\src\components\Projects\Projects.css
File Name: Projects.css
Code:
/* Projects Section */


/* Filter Container */
.filter-container {
  display: flex;
  justify-content: center;
}

.filter-dropdown {
  position: relative;
}

.filter-btn {
  background-color: var(--accent-color-light);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.dark-theme .filter-btn {
  background-color: var(--accent-color-dark);
}

.filter-btn:hover {
  background-color: var(--orbit-color-hover-light);
}

.dark-theme .filter-btn:hover {
  background-color: var(--orbit-color-hover-dark);
}

.filter-icon {
  width: 1rem;
  height: 1rem;
  fill: white;
}

.filter-dropdown-content {
  display: none;
  position: absolute;
  background-color: #fff; /* White background for better contrast */
  min-width: 180px; /* Wider dropdown */
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  z-index: 1;
  border-radius: 8px; /* Match button radius */
  overflow: hidden; /* Ensures rounded corners apply to internal elements */
  top: 100%; /* Position dropdown below the button */
  left: 0;
  margin-top: 0.5rem; /* Space between button and dropdown */
}

/* Filter Dropdown Links */
.filter-dropdown-content a {
  color: #333; /* Darker text color */
  padding: 12px 16px;
  text-decoration: none;
  display: block;
  transition: background-color 0.3s ease; /* Add transition to hover */
}

/* Hover State (more distinct) */
.filter-dropdown-content a:hover {
  background-color: #e9e9e9; /* Slightly darker gray */
}

/* Active State (better contrast and visual indicator) */
.filter-dropdown-content a.active {
  background-color: var(--accent-color-light); /* Your theme's accent color */
  color: white;
  font-weight: 600; /* Make active item slightly bolder */
}

.dark-theme .filter-dropdown-content a.active {
    background-color: var(--accent-color-dark); /* Your theme's accent color */
    color: white;
    font-weight: 600; /* Make active item slightly bolder */
  }

/* Show Dropdown on Hover (or click if you prefer that) */
.filter-dropdown:hover .filter-dropdown-content {
  display: block;
}

/* Projects Grid */
.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-bottom: 3rem;
}
/* Project Card */
.project-card {
  min-width: 300px;
  flex-shrink: 0;
  background: rgba(255, 255, 255, 0.25);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.18);
  padding: 2rem;
  position: relative;
  display: flex;
  flex-direction: column;
  transition: transform 0.4s ease-in-out, opacity 0.4s ease-in-out;
  opacity: 1;
}

.dark-theme .project-card {
  background: rgba(0, 0, 0, 0.25);
  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
}

.project-title {
  font-size: 1.4rem;
  margin-bottom: 0.5rem;
  color: var(--accent-color-light);
}

.dark-theme .project-title {
  color: var(--accent-color-dark);
}

.project-short-description {
  font-size: 0.9rem;
  margin-bottom: 1rem;
}

.project-technologies {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.tech {
  background-color: var(--orbit-color-light);
  color: #fff;
  padding: 0.3rem 0.6rem;
  border-radius: 5px;
  font-size: 0.8rem;
}

.dark-theme .tech {
  background-color: var(--orbit-color-dark);
}

/* GitHub Link */
.github-link {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  padding: 0.3rem;
  border-radius: 50%;
  background-color: rgba(0, 0, 0, 0.2);
  z-index: 2;
  cursor: pointer;
}

.dark-theme .github-link {
  background-color: rgba(255, 255, 255, 0.2);
}

.github-logo {
  width: 25px;
  height: 25px;
}

/* View Button */
.view-button {
  background-color: var(--accent-color-light);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 5px;
  font-size: 0.9rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
  margin-top: auto;
  align-self: flex-start;
}

.dark-theme .view-button {
  background-color: var(--accent-color-dark);
}

.view-button:hover {
  background-color: var(--orbit-color-hover-light);
}

.dark-theme .view-button:hover {
  background-color: var(--orbit-color-hover-dark);
}



/* Project Modal */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10;
}

.modal-content {
  background-color: var(--bg-color-light);
  color: var(--text-color-light);
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  max-width: 80%;
  max-height: 80%;
  overflow-y: auto;
  position: relative;
}

.dark-theme .modal-content {
  background-color: var(--bg-color-dark);
  color: var(--text-color-dark);
}

.modal-title {
  font-size: 1.6rem;
  margin-bottom: 1rem;
  color: var(--accent-color-light);
}

.dark-theme .modal-title {
  color: var(--accent-color-dark);
}

.modal-description {
  margin-bottom: 1rem;
}

.close-button {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: none;
  border: none;
  font-size: 1.2rem;
  cursor: pointer;
  color: var(--text-color-light);
  z-index: 11;
}

.dark-theme .close-button {
  color: var(--text-color-dark);
}

.filter-dropdown-content a.active {
  background-color: var(--accent-color-light);
  color: white;
}

.dark-theme .filter-dropdown-content a.active {
  background-color: var(--accent-color-dark);
  color: white;
}

/* Add these new styles to your existing Projects.css file */

/* Update these styles in your Projects.css file */

.carousel-container {
  position: relative;
  width: 100%;
  height: 550px; /* Increased height to accommodate the lift effect */
  display: flex;
  align-items: center;
  justify-content: center;
  perspective: 1000px; /* Add perspective for 3D transforms */
}

.carousel-track {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  transform-style: preserve-3d;
}

.carousel-card {
  position: absolute;
  width: 300px;
  transition: all 0.5s ease;
}

.carousel-card.position-0 {
  transform: translateX(0) translateY(-20px); /* Lift the active card up */
  z-index: 3;
  opacity: 1;
  scale: 1.05; /* Slightly larger */
}

.carousel-card.position-1 {
  transform: translateX(calc(100% + 2rem)) translateY(0) rotateY(-10deg); /* Rotate inward */
  transform-origin: left center;
  z-index: 2;
  opacity: 0.5; /* More fade */
}

.carousel-card.position--1 {
  transform: translateX(calc(-100% - 2rem)) translateY(0) rotateY(10deg); /* Rotate inward */
  transform-origin: right center;
  z-index: 2;
  opacity: 0.5; /* More fade */
}

.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background-color: var(--accent-color-light);
  color: white;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  z-index: 4;
  font-size: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  opacity: 0.8;
}

.dark-theme .carousel-button {
  background-color: var(--accent-color-dark);
}

.carousel-button:hover {
  background-color: var(--orbit-color-hover-light);
  transform: translateY(-50%) scale(1.1);
}

.dark-theme .carousel-button:hover {
  background-color: var(--orbit-color-hover-dark);
}

.carousel-button.prev {
  left: 1rem;
}

.carousel-button.next {
  right: 1rem;
}

/* Update project card styles */
.project-card {
  min-width: 300px;
  height: 215px;
  margin: 0;
  background: rgba(255, 255, 255, 0.25);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 10px;
  border: 1px solid rgba(255, 255, 255, 0.18);
  padding: 1.3rem;
  display: flex;
  flex-direction: column;
  transition: all 0.5s ease;
}

.dark-theme .project-card {
  background: rgba(0, 0, 0, 0.25);
}

/* Remove the grid styles */
.projects-grid {
  display: none;
}

/* Enhanced hover effect for the active card */
.carousel-card.position-0:hover {
  transform: translateX(0) translateY(-25px); /* Lift slightly higher on hover */
  scale: 1.06;
}

/* Smooth transition for all transform properties */
.carousel-card {
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Add these new styles to your existing CSS */

.carousel-track {
  cursor: grab;
  user-select: none;
}

.carousel-track.dragging {
  cursor: grabbing;
}

/* Update the transition property to exclude transform when dragging */
.carousel-card {
  transition: opacity 0.5s ease, box-shadow 0.5s ease;
}

.carousel-card:not(.dragging) {
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Prevent text selection during drag */
.carousel-track,
.project-card {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Optional: Add a subtle indicator that the carousel is draggable */
.carousel-track:hover {
  cursor: grab;
}

.carousel-track:active {
  cursor: grabbing;
}


--------------------
File Path: C:\Users\admin\Desktop\portfolio\my-react-portfolio\src\components\Projects\Projects.jsx
File Name: Projects.jsx
Code:
import React, { useState, useEffect, useRef } from "react";
import ProjectModal from "./ProjectModal";
import "./Projects.css";
import projectsData from "./projectsData";
import githubLogoLight from "../assets/github-mark.png";
import githubLogoDark from "../assets/github-mark-white.png";

const Projects = ({ isDarkMode }) => {
  const [selectedProject, setSelectedProject] = useState(null);
  const [activeFilter, setActiveFilter] = useState("all");
  const [activeIndex, setActiveIndex] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  
  // Drag functionality states
  const [isDragging, setIsDragging] = useState(false);
  const [startX, setStartX] = useState(0);
  const [dragX, setDragX] = useState(0);
  const trackRef = useRef(null);

  const openModal = (project) => {
    // Only open modal if we haven't dragged
    if (!isDragging) {
      setSelectedProject(project);
    }
  };

  const closeModal = () => {
    setSelectedProject(null);
  };

  const handleFilterClick = (filter) => {
    setActiveFilter(filter);
    setActiveIndex(0);
  };

  const filteredProjects =
    activeFilter === "all"
      ? projectsData
      : projectsData.filter((project) => project.filter.includes(activeFilter));

  const githubLogo = isDarkMode ? githubLogoDark : githubLogoLight;

  const nextSlide = () => {
    if (!isTransitioning) {
      setIsTransitioning(true);
      setActiveIndex((current) => (current + 1) % filteredProjects.length);
      setTimeout(() => setIsTransitioning(false), 500);
    }
  };

  const prevSlide = () => {
    if (!isTransitioning) {
      setIsTransitioning(true);
      setActiveIndex((current) =>
        current === 0 ? filteredProjects.length - 1 : current - 1
      );
      setTimeout(() => setIsTransitioning(false), 500);
    }
  };

  // Mouse drag handlers
  const handleMouseDown = (e) => {
    setIsDragging(true);
    setStartX(e.pageX - dragX);
    if (trackRef.current) {
      trackRef.current.style.cursor = 'grabbing';
    }
  };

  const handleMouseMove = (e) => {
    if (!isDragging) return;
    
    const currentX = e.pageX - startX;
    setDragX(currentX);

    // Determine if we should change slides based on drag distance
    if (Math.abs(currentX) > 100) {
      if (currentX > 0) {
        prevSlide();
      } else {
        nextSlide();
      }
      // Reset drag state
      setIsDragging(false);
      setDragX(0);
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
    setDragX(0);
    if (trackRef.current) {
      trackRef.current.style.cursor = 'grab';
    }
  };

  // Clean up mouse events
  useEffect(() => {
    const cleanup = () => {
      setIsDragging(false);
      setDragX(0);
    };

    document.addEventListener('mouseup', cleanup);
    return () => {
      document.removeEventListener('mouseup', cleanup);
    };
  }, []);

  const getVisibleCards = () => {
    const numProjects = filteredProjects.length;
  if (numProjects === 0) {
    return []; // Return empty array if no projects match the filter
  }

  if (numProjects === 1) {
    return [{
      project: filteredProjects[0],
      position: 0 // Only center position is needed
    }];
  }

  if (numProjects === 2) {
    return [
      {
        project: filteredProjects[activeIndex],
        position: 0 // Center position
      },
      {
        project: filteredProjects[(activeIndex + 1) % 2], // The other project will be positioned according to current activeIndex
        position: activeIndex === 0 ? 1 : -1
      }
    ];
  }

  // For three or more projects, your original logic is fine:
  const cards = [];
  for (let i = -1; i <= 1; i++) {
    let index = activeIndex + i;
    if (index < 0) index = numProjects - 1;
    if (index >= numProjects) index = 0;
    cards.push({
      project: filteredProjects[index],
      position: i
    });
  }
  return cards;
};

  return (
    <section id="projects" className="projects-section">
      <h2 className="section-title">Projects</h2>
      <div className="filter-container">
        <div className="filter-dropdown">
          <button id="filterBtn" className="filter-btn">
            <span>Filter by Technology</span>
            <svg
              className="filter-icon"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M3 6h18M6 12h12m-9 6h6"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
              />
            </svg>
          </button>
          <div id="filterDropdown" className="filter-dropdown-content">
            <a
              href="#projects"
              data-filter="all"
              className={activeFilter === "all" ? "active" : ""}
              onClick={() => handleFilterClick("all")}
            >
              All
            </a>
            <a
              href="#projects"
              data-filter="python"
              className={activeFilter === "python" ? "active" : ""}
              onClick={() => handleFilterClick("python")}
            >
              Python
            </a>
            <a
              href="#projects"
              data-filter="tabi"
              className={activeFilter === "tabi" ? "active" : ""}
              onClick={() => handleFilterClick("tabi")}
            >
              Power BI/Tableau
            </a>
            <a
              href="#projects"
              data-filter="bases"
              className={activeFilter === "bases" ? "active" : ""}
              onClick={() => handleFilterClick("bases")}
            >
              MySQL/MariaDB
            </a>
            <a
              href="#projects"
              data-filter="django"
              className={activeFilter === "django" ? "active" : ""}
              onClick={() => handleFilterClick("django")}
            >
              Django
            </a>
            <a
              href="#projects"
              data-filter="react"
              className={activeFilter === "react" ? "active" : ""}
              onClick={() => handleFilterClick("react")}
            >
              React
            </a>
          </div>
        </div>
      </div>

      <div className="carousel-container">
        <button className="carousel-button prev" onClick={prevSlide}>
          &#8249;
        </button>
        <div 
          ref={trackRef}
          className={`carousel-track ${isDragging ? 'dragging' : ''}`}
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp}
        >
          {getVisibleCards().map(({ project, position }) => (
            <div
              className={`project-card carousel-card position-${position}`}
              key={project.id}
              style={{
                transform: `
                  ${position === 0 
                    ? `translateX(${dragX}px) translateY(-20px)` 
                    : position === 1 
                    ? `translateX(calc(100% + 2rem + ${dragX}px)) translateY(0) rotateY(-10deg)` 
                    : `translateX(calc(-100% - 2rem + ${dragX}px)) translateY(0) rotateY(10deg)`
                  }
                `
              }}
            >
              {project.githubLink && (
                <a
                  href={project.githubLink}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="github-link"
                >
                  <img
                    src={githubLogo}
                    alt="GitHub Repo"
                    className="github-logo"
                  />
                </a>
              )}
              <h3 className="project-title">{project.title}</h3>
              <p className="project-short-description">
                {project.shortDescription}
              </p>
              <div className="project-technologies">
                {project.technologies.map((tech) => (
                  <span key={tech} className="tech">
                    {tech}
                  </span>
                ))}
              </div>
              <button className="view-button" onClick={() => openModal(project)}>
                View
              </button>
            </div>
          ))}
        </div>
        <button className="carousel-button next" onClick={nextSlide}>
          &#8250;
        </button>
      </div>

      {selectedProject && (
        <ProjectModal project={selectedProject} onClose={closeModal} />
      )}
    </section>
  );
};

export default Projects;
--------------------
File Path: C:\Users\admin\Desktop\portfolio\my-react-portfolio\src\components\Projects\projectsData.jsx
File Name: projectsData.jsx
Code:
import jobSearch1 from "../assets/Job_Search/Job_Search_1.png";
import jobSearch2 from "../assets/Job_Search/Job_Search_2.png";
import jobSearch3 from "../assets/Job_Search/Job_Search_3.png";



const projectsData = [
    {
      id: 'k-line-data-analysis',
      title: 'K-line Data Analysis',
      shortDescription: 'Financial data analysis using Python',
      description:
        'This project focuses on analyzing financial K-line data using Python libraries like Pandas, NumPy, Matplotlib, and mplfinance. It involves data cleaning, statistical analysis, and visualization to derive meaningful insights from K-line charts (candlestick charts).',
      technologies: ['Python', 'Pandas', 'NumPy', 'Matplotlib', 'mplfinance'],
      githubLink: 'https://github.com/SosoPkhakadze/K-line-Data-Analysis',
      filter: ['python']
    },
    {
      id: 'search-products',
      title: 'Search Products',
      shortDescription: 'E-commerce product search application',
      description:
        'Developed a web application for searching products from an e-commerce platform. The project uses web scraping techniques (likely with libraries like BeautifulSoup) to extract product information and provide search functionality.',
      technologies: ['Python', 'Web Scraping', 'BeautifulSoup'],
      githubLink: 'https://github.com/SosoPkhakadze/Search_Products',
      filter: ['python', 'bases']
    },
    {
      id: 'weather-forecast',
      title: 'Weather Forecast',
      shortDescription: 'Location-based weather app with Django',
      description:
        'A Django-based weather forecast application that utilizes the OpenWeatherMap API to fetch and display current weather data based on user location or a specified city. It includes backend functionality to handle API requests and a frontend to present the weather information.',
      technologies: ['Django', 'Python', 'OpenWeatherMap API'],
      githubLink: 'https://github.com/SosoPkhakadze/Weather-forecast',
      filter: ['django', 'python']
    },
    {
      id: 'job-aggregator',
      title: 'Job Aggregator Website',
      shortDescription: 'Full-stack job search platform',
      description:
        'Developed a full-stack web application utilizing Django for backend and React for frontend, enabling users to search for job listings based on title and location. Integrated with an external API to fetch real-time job data. Implemented features for displaying search results and viewing detailed job information.',
      technologies: ['React', 'Django', 'Python'],
      githubLink: 'https://github.com/SosoPkhakadze/Job_Search',
      filter: ['react', 'django', 'python'],
      images: [jobSearch1, jobSearch2, jobSearch3]
    },
    {
      id: 'image-resizing',
      title: 'Image Resizing & Interpolation',
      shortDescription: 'Algorithmic image manipulation',
      description:
        'Built an image resizing application from scratch using bilinear and bicubic interpolation techniques without relying on built-in libraries. This project demonstrates fundamentals of image processing and displays results through Matplotlib for visualization.',
      technologies: ['Python', 'Matplotlib'],
      filter: ['python']
    },
    {
      id: 'price-comparison',
      title: 'Price Comparison',
      shortDescription: 'Real-time price tracking web app',
      description:
        'Developed a price comparison web application using Django, integrating scraping scripts for major e-commerce websites like Amazon, eBay, Walmart, Target, Etsy, and Wayfair. Implemented sorting functionality to display search results from cheapest to most expensive.',
      technologies: ['Python', 'Django', 'BeautifulSoup'],
      filter: ['django', 'python', 'bases']
    },
    {
      id: 'sales-dashboard',
      title: 'Sales Dashboard',
      shortDescription: 'Data-driven sales insights with Power BI',
      description:
        'Developed an advanced sales dashboard using Power BI, leveraging data from SQL databases. Demonstrated expertise in data cleaning, exploratory data analysis, and predictive modeling to uncover actionable insights driving business decisions.',
      technologies: ['Power BI', 'SQL'],
      filter: ['tabi']
    },
    {
      id: 'data-analysis-dashboard',
      title: 'Data Analysis Dashboard',
      shortDescription: 'Restaurant performance analysis with Power BI',
      description:
        'Designed a comprehensive data analysis dashboard for a Pizza Restaurant using Power BI and MariaDB, delivering key performance indicators and actionable insights, facilitating strategic decision-making and business optimization.',
      technologies: ['Power BI', 'MariaDB'],
      filter: ['tabi', 'bases']
    },
    {
      id: 'covid-insight-analysis',
      title: 'COVID Insight Analysis Dashboard',
      shortDescription: 'Public health data exploration with Power BI',
      description:
        'Leveraged Power BI to analyze COVID-19 data, providing insights into virus spread, vaccination rates, and their impact on public health and the economy. Integrated diverse data sources, crafted interactive visualizations, enabling users to discern trends for informed decision-making.',
      technologies: ['Power BI'],
      filter: ['tabi']
    },
    {
      id: 'user-requirements-analysis',
      title: 'User Requirements Analysis Dashboard',
      shortDescription: 'Tableau dashboard for user insights',
      description:
        'Developed a comprehensive Tableau dashboard project by analyzing user requirements, creating mockups, and deciding on chart types. Built the data model, prepared the data source, and created various charts. Designed the layout container and constructed the dashboard to deliver insightful visualizations.',
      technologies: ['Tableau'],
      filter: ['tabi']
    },
  ];
  
  export default projectsData;
--------------------
